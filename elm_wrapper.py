import yaml
import pandas as pd
import numpy as np
import atexit

from pathlib import Path
import datetime as dt
from calendar import monthrange
import calendar

import subprocess
import os
import os.path
from os import path

from ax import Trial

from boa import (
    BaseWrapper,
    cd_and_cd_back,
    get_trial_dir,
    make_trial_dir,
)

import netCDF4 as nc

def read_experiment_config(config_file):
    """
    Read experiment configuration yml file for setting up the optimization.
    yml file contains the list of parameters, and whether each parameter is a fixed
    parameter or a range parameter. Fixed parameters have a value specified, and range
    parameters have a range specified.
    Parameters
    ----------
    config_file : str
        File path for the experiment configuration file
    Returns
    -------
    params: list
        Parameters formatted for the Ax experiment
    experiment_settings: dict
        Optimization options for the experiment
    """

    # Load the experiment config yml file
    with open(config_file, "r") as yml_config:
        loaded_configs = yaml.safe_load(yml_config)

    # Format parameters for Ax experiment
    for param in loaded_configs["parameters"].keys():
        # Add "name" attribute for each parameter
        loaded_configs["parameters"][param]["name"] = param
    # Parameters from dictionary to list
    params = [loaded_configs["parameters"][param] for param in list(loaded_configs["parameters"])]
    experiment_settings = loaded_configs["optimization_options"]
    model_settings = loaded_configs["model_options"]
    return params, experiment_settings, model_settings

def create_experiment_dir(working_dir, ax_client):
    """
    Creates directory for the experiment and returns the path.
    The directory is named with the experiment name and the current datetime.
    Parameters
    ----------
    working_dir : str
        Working directory, the parent directory where the experiment directory will be written
    ax_client : Ax client
        Initialized Ax client for the experiment
    Returns
    -------
    Path
        Path to the directory for the experiment
    """
    # Directory named with experiment name and datetime
    ex_dir = Path(working_dir) / (
        ax_client.experiment.name + "_" + dt.datetime.now().strftime("%Y%m%dT%H%M%S")
    )
    ex_dir.mkdir()
    return ex_dir


def create_trial_dir(experiment_dir, trial_index):
    """
    Create a directory for a trial, and return the path to the directory.
    Trial directory is created inside the experiment directory, and named with the trial index.
    Model configs and outputs for each trial will be written here.
    Parameters
    ----------
    experiment_dir : Path
        Directory for the experiment
    trial_index : int
        Trial index from the Ax client
    Returns
    -------
    Path
        Directory for the trial
    """
    trial_dir = experiment_dir / str(trial_index).zfill(6)  # zero-padded trial index
    trial_dir.mkdir()
    return trial_dir

def write_configs(trial_dir, parameters, model_options):
    """
    Write model configuration file for each trial (model run). This is the config file used by FETCH3
    for the model run.
    The config file is written as ```config.yml``` inside the trial directory.
    Parameters
    ----------
    trial_dir : Path
        Trial directory where the config file will be written
    parameters : list
        Model parameters for the trial, generated by the ax client
    model_options : dict
        Model options loaded from the experiment config yml file.
    Returns
    -------
    str
        Path for the config file
    """
    with open(trial_dir / "config.yml", "w") as f:
        # Write model options from loaded config
        # Parameters for the trial from Ax
        config_dict = {"model_options": model_options, "parameters": parameters}
        yaml.dump(config_dict, f)
        return f.name

def get_model_obs(obsfile, ex_settings, model_settings, parameters, trial_index):
    """
    Read in observation data model output for a trial, which will be used for
    calculating the objective function for the trial.
    Parameters
    ----------
    modelfile : str
        File path to the model output
    obsfile : str
        File path to the observation data
    model_settings: dict
        dictionary with model settings read from model config file
    Returns
    -------
    model_output: pandas Series
        Model output
    obs: pandas Series
        Observations
    ..todo::
        * Add options to specify certain variables from the observation/output files
        * Add option to read from .nc file
    """
    # Read config file

    # Read in model output
    experiment_name = ex_settings["experiment"]["name"]
    run_dir = model_settings["run_dir"]
    start_year = ex_settings["experiment"]["start_year"]
    end_year = ex_settings["experiment"]["end_year"]
    start_month = ex_settings["experiment"]["start_month"]
    end_month = ex_settings["experiment"]["end_month"]

    case_name = experiment_name + '_opt_' + str(trial_index)

    BegDay = dt.datetime(start_year,start_month,1)
    EndDay = dt.datetime(end_year,end_month,monthrange(end_year,end_month)[1])
    nDays = EndDay-BegDay
    nHours = nDays.total_seconds()/3600 + 24
    LengthModData = int(nHours)

    #Remove additional days in leap years
    nLeapYears = calendar.leapdays(start_year-1,end_year+1)
    LengthModData = LengthModData - nLeapYears*24

    AllModVarName = ex_settings["experiment"]["var_to_read"]
    
    #AllModelVar = pd.DataFrame()
    AllModelVar = np.empty(shape=(LengthModData,1))

    for v in range(len(AllModVarName)):
        
        ModVarName = AllModVarName[v]
        modelVar = np.empty(shape=(LengthModData,1))
        modelVar[:] = np.nan
        i = 0

        if start_year < end_year:
            y = start_year
            while y <= end_year-1:
                for m in range(1,13):
                    nDaysPerMonth = monthrange(y,m)[1]
                    if calendar.isleap(y) and m == 2:
                        nDaysPerMonth = nDaysPerMonth - 1
                    for d in range(1,nDaysPerMonth+1):
                        model_nc_filename = run_dir + case_name + '/run/' + case_name + '.elm.h0.' + str(y).zfill(4) + '-' + str(m).zfill(2) + '-' + str(d).zfill(2) + '-00000.nc'
                        CurDaydf = nc.Dataset(model_nc_filename)
                        CurDayVar = CurDaydf.variables[ModVarName]
                        CurDayVar = CurDayVar[:]
                        modelVar[i:i+24] = CurDayVar
                        i = i+24
                y = y+1

            y = end_year
            if end_month == 1:
                m = 1
                nDaysPerMonth = monthrange(y,m)[1]
                for d in range(1,nDaysPerMonth+1):
                    model_nc_filename = run_dir + case_name + '/run/' + case_name + '.elm.h0.' + str(y).zfill(4) + '-' + str(m).zfill(2) + '-' + str(d).zfill(2) + '-00000.nc'
                    CurDaydf = nc.Dataset(model_nc_filename)
                    CurDayVar = CurDaydf.variables[ModVarName]
                    CurDayVar = CurDayVar[:]
                    modelVar[i:i+24] = CurDayVar
                    i = i+24

            else:                    
               for m in range(1,end_month+1):
                    nDaysPerMonth = monthrange(y,m)[1]
                    if calendar.isleap(y) and m == 2:
                        nDaysPerMonth = nDaysPerMonth - 1
                    for d in range(1,nDaysPerMonth+1):
                        model_nc_filename = run_dir + case_name + '/run/' + case_name + '.elm.h0.' + str(y).zfill(4) + '-' + str(m).zfill(2) + '-' + str(d).zfill(2) + '-00000.nc'
                        CurDaydf = nc.Dataset(model_nc_filename)
                        CurDayVar = CurDaydf.variables[ModVarName]
                        CurDayVar = CurDayVar[:]     
                        modelVar[i:i+24] = CurDayVar
                        i = i+24            

        elif start_year == end_year:
            y = start_year
            if end_month == 1:
                m = 1
                nDaysPerMonth = monthrange(y,m)[1]
                for d in range(1,nDaysPerMonth+1):
                    model_nc_filename = run_dir + case_name + '/run/' + case_name + '.elm.h0.' + str(y).zfill(4) + '-' + str(m).zfill(2) + '-' + str(d).zfill(2) + '-00000.nc'
                    CurDaydf = nc.Dataset(model_nc_filename)
                    CurDayVar = CurDaydf.variables[ModVarName]
                    CurDayVar = CurDayVar[:]
                    modelVar[i:i+24] = CurDayVar
                    i = i+24

            else:                    
               for m in range(1,end_month+1):
                    nDaysPerMonth = monthrange(y,m)[1]
                    if calendar.isleap(y) and m == 2:
                        nDaysPerMonth = nDaysPerMonth - 1
                    for d in range(1,nDaysPerMonth+1):
                        model_nc_filename = run_dir + case_name + '/run/' + case_name + '.elm.h0.' + str(y).zfill(4) + '-' + str(m).zfill(2) + '-' + str(d).zfill(2) + '-00000.nc'
                        CurDaydf = nc.Dataset(model_nc_filename)
                        CurDayVar = CurDaydf.variables[ModVarName]
                        CurDayVar = CurDayVar[:]
                        modelVar[i:i+24] = CurDayVar
                        i = i+24

        #AllModelVar[AllModVarName[v]] = modelVar.tolist()
        AllModelVar = np.append(AllModelVar,modelVar,1)

    AllModelVar = np.delete(AllModelVar,0,1)
    modeldf = pd.DataFrame()
    modeldf["Time"] = pd.date_range(start=BegDay,end=EndDay + dt.timedelta(days=1) - dt.timedelta(hours=1), freq='H')
    modeldf = modeldf[~((modeldf.Time.dt.month == 2) & (modeldf.Time.dt.day == 29))]
    #modeldf["CH4_SURF_AERE"] = np.multiply(AllModelVar[:,0],AllModelVar[:,6])+np.multiply(AllModelVar[:,1],(1-AllModelVar[:,6]))
    #modeldf["CH4_SURF_EBUL"] = np.multiply(AllModelVar[:,2],AllModelVar[:,6])+np.multiply(AllModelVar[:,3],(1-AllModelVar[:,6]))
    #modeldf["CH4_SURF_DIFF"] = np.multiply(AllModelVar[:,4],AllModelVar[:,6])+np.multiply(AllModelVar[:,5],(1-AllModelVar[:,6]))
    #modeldf["FCH4"] = modeldf["CH4_SURF_AERE"] + modeldf["CH4_SURF_EBUL"] + modeldf["CH4_SURF_DIFF"]
    ModVarName = ex_settings["experiment"]["model_var"]
    modeldf[ModVarName] = AllModelVar[:,0]
    ParamTime = pd.DataFrame()
    ParamTime["Time"] = modeldf["Time"]
    modeldf = modeldf.set_index("Time")

    # Read in observation data
    #obsdf = pd.read_csv(obsfile,skiprows=2)
    obsdf = pd.read_csv(obsfile)
    obsdf[obsdf == -9999] = np.nan
    obsdf["TIMESTAMP_START"] = pd.to_datetime(obsdf["TIMESTAMP_START"], format='%Y%m%d%H%M', errors='ignore')
    obsdf = obsdf[~((obsdf.TIMESTAMP_START.dt.month == 2) & (obsdf.TIMESTAMP_START.dt.day == 29))]
    obsdf = obsdf.set_index("TIMESTAMP_START")
    obsdf = obsdf.resample('H').apply(np.mean)

    #Apply unit conversion on observed data
    ObsVarName = ex_settings["experiment"]["obs_var"]
    UnitConv = ex_settings["experiment"]["obs2mod_unit_conv"]
    obsdf[ObsVarName] = obsdf[ObsVarName]*UnitConv

    # Slice met data to just the time period that was modeled
    obsdf = obsdf.loc[ParamTime.Time[0] : ParamTime["Time"].iloc[-1]]

    #Resample obs and mod data into monthly dataframes
    obsdf = obsdf.resample('D').apply(np.mean)
    modeldf = modeldf.resample('D').apply(np.mean)

    #Prepare non-nan entries in observed and modeled data
    not_nans = ~obsdf[ObsVarName].isna()
    obsdf_not_nans = obsdf[ObsVarName].loc[not_nans]
    modeldf_not_nans = modeldf[ModVarName].loc[not_nans]

    #print('Sum of equal entries is ',sum(obsdf_not_nans == modeldf_not_nans))
    #print('Total number of entries is ',len(obsdf_not_nans))
    #print('Unique Obs entries ',len(set(obsdf_not_nans)))
    #print('Unique Mod entries ',len(set(modeldf_not_nans)))

    return modeldf_not_nans, obsdf_not_nans

class ELMWrapper(BaseWrapper):
    _processes = []

    def __init__(self, ex_settings, model_settings, experiment_dir):
        self.ex_settings = ex_settings
        self.model_settings = model_settings
        self.experiment_dir = experiment_dir
        self._metric_properties = {}
        self._working_dir = None
        self._output_dir = None
        self.script_options = {}
        self._metric_cache = {}
        self._config = {}
        self.config_path = {}
        #self._metric_names = kwargs.get("metric_names",[])

    def run_model(self, trial: Trial):

        trial_dir = make_trial_dir(self.experiment_dir, trial.index)

        config_dir = write_configs(trial_dir, trial.arm.parameters, self.model_settings)

        create_case_dir = self.model_settings["create_case_dir"]
        working_dir = self.model_settings["working_dir"]
        experiment_name = self.ex_settings["experiment"]["name"]
        config_file_name = self.ex_settings["config_file"]["name"]
        ELM_Param_dir = self.ex_settings["input_dir"]
        run_dir = self.model_settings["run_dir"]

        #Create case for running the trial
        cwd = os.getcwd()
        os.chdir(create_case_dir)

        case_name = experiment_name + '_opt_' + str(trial.index)

        case_dir =  working_dir + case_name 

        cmd = (f"./create_newcase --case {case_dir} --compset I20TRCNPRDCTCBC --mach cades  --compiler gnu --project ccsi --res ELM_USRDAT")
        subprocess.run(cmd, universal_newlines=True, shell=True)

        os.chdir(cwd)

        #Copy stream files if they exist
        orig_user_datm_ELM = run_dir + experiment_name + '/run/' + 'datm.streams.txt.ELM1PT.ELM_USRDAT'
        trial_user_datm_ELM_dir = run_dir + case_name +'/run/'

        if path.exists(orig_user_datm_ELM):
            cmd = (f"cp {orig_user_datm_ELM} {trial_user_datm_ELM_dir}")
            subprocess.run(cmd, universal_newlines=True, shell=True)

        orig_user_datm_co2 = run_dir + experiment_name + '/run/' + 'datm.streams.txt.co2tseries'
        trial_user_datm_co2_dir = run_dir + case_name +'/run/'

        if path.exists(orig_user_datm_co2):
            cmd = (f"cp {orig_user_datm_co2} {trial_user_datm_co2_dir}")
            subprocess.run(cmd, universal_newlines=True, shell=True)

        #Delete all files in usercode from previous simulations
        Case_UserCodeDir_ToDel = working_dir + case_name + '/SourceMods/src.elm/*'
        cmd = (f"rm -r {Case_UserCodeDir_ToDel} ")       
        subprocess.run(cmd, universal_newlines=True, shell=True)

        #Copy user code 
        UserCodeDir = working_dir + experiment_name  + '/SourceMods/src.elm/'
        Case_UserCodeDir = working_dir + case_name + '/SourceMods/'
        cmd = (f"cp -a {UserCodeDir} {Case_UserCodeDir} ")       
        subprocess.run(cmd, universal_newlines=True, shell=True)
        
        #Copy InParam and modify paramfile location
        cmd = (f"cp InParam {case_dir} ")       
        subprocess.run(cmd, universal_newlines=True, shell=True)

        CaseInParam = case_dir + '/InParam'

        # Read in the file
        with open(CaseInParam, 'r') as file :
            filedata = file.read()

        # Replace the Orig ParamFile by the file corresponding to the trial
        OrigParamFile = working_dir + experiment_name + '/OptInput/clm_params.cbgc.c07292018.nc'
        TrialParamFile = working_dir + case_name + '/clm_params.cbgc.c07292018.nc'
        filedata = filedata.replace(OrigParamFile,TrialParamFile)

        # Write the file out again
        with open(CaseInParam, 'w') as file:
            file.write(filedata)

        #Copy and Update parameter file with corresponding trial values
        cmd = (f"cp {OrigParamFile} {case_dir} ")       
        subprocess.run(cmd, universal_newlines=True, shell=True)
        
        AllParams = list(trial.arm.parameters.keys())
        dset = nc.Dataset(TrialParamFile, 'r+')  
        for p in AllParams:
            if len(dset[p][:]) == 25:
                dset[p][13] = trial.arm.parameters.get(p)
            else:
                dset[p][:] = trial.arm.parameters.get(p)
        dset.close()
            
        #Setup and build case
        case_dir = case_dir + '/'
        os.chdir(case_dir)

        subprocess.call("./InParam", shell=True)
        if trial.index > 12:
            subprocess.call("./case.setup --reset", shell=True)
            subprocess.call("./case.build --clean", shell=True)
            subprocess.call("./case.build", shell=True)

        #Submit case
        subprocess.call("./case.submit", shell=True)

        os.chdir(cwd)

    def set_trial_status(self, trial: Trial) -> None:

        #Check if last nc output file exist
        experiment_name = self.ex_settings["experiment"]["name"]
        run_dir = self.model_settings["run_dir"]
        end_year = self.ex_settings["experiment"]["end_year"]
        end_month = self.ex_settings["experiment"]["end_month"]
        end_day = monthrange(end_year,end_month)[1]
        case_name = experiment_name + '_opt_' + str(trial.index)

        last_nc_filename = run_dir + case_name + '/run/' + case_name + '.elm.h0.' + str(end_year).zfill(4) + '-' + str(end_month).zfill(2) + '-' + str(end_day).zfill(2) + '-00000.nc'
        beforelast_nc_filename = run_dir + case_name + '/run/' + case_name + '.elm.h0.' + str(end_year).zfill(4) + '-' + str(end_month).zfill(2) + '-' + str(end_day-1).zfill(2) + '-00000.nc'
        
        if path.exists(last_nc_filename):
            
            lastfile_size = os.path.getsize(last_nc_filename)
            beforelastfile_size = os.path.getsize(beforelast_nc_filename)
            
            if (lastfile_size == beforelastfile_size):
                trial.mark_completed()

    def fetch_trial_data(self, trial, metric_properties, metric_name, *args, **kwargs):

        y_pred, y_true = get_model_obs(
            self.ex_settings["obsfile"],
            self.ex_settings,
            self.model_settings,
            trial.arm.parameters,
            trial.index,
        )

        #return {"RMSE": {"y_true": y_true,"y_pred": y_pred}}
 

        #print('y_pred',y_pred,'y_true',y_true)
        #print('RMSE = ',np.sqrt(((y_pred-y_true) ** 2).mean()))
        
        return dict(y_pred=y_pred, y_true=y_true)

def exit_handler():
    for process in ELMWrapper._processes:
        process.kill()


atexit.register(exit_handler)


